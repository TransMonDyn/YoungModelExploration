//Env
val env = LocalEnvironment(20)

// Inputs
val seed = Val[Int]
val probaMove = Val[Double] //[0.0 -> 1.0] step: 0.33
val probaBirth = Val[Double] //[0.0 -> 1.0] step: 0.33
val probaDeath = Val[Double] //[0.0 -> 1.0] step: 0.33
val probaDeathByOvercrowding = Val[Double] //[0.0 -> 1.0] step: 0.33
val initialPopulation = Val[Double] //[1 -> 100] step: 33



// Outputs
val ticks = Val[Double]
val population = Val[Double]
val nbSettlements = Val[Double]
val occupiedWorld = Val[Double]
val thistime = Val[Double]


// Plan d'experience
val exploration =
  ExplorationTask(
  	(seed in (UniformDistribution[Int]() take 100)) x
    (probaMove in List(0.0, 0.33, 0.66, 1.0)) x
    (probaBirth in List(0.0, 0.33, 0.66, 1.0)) x
    (probaDeath in List(0.0, 0.33, 0.66, 1.0)) x
    (probaDeathByOvercrowding in List(0.0, 0.33, 0.66, 1.0)) x
    (initialPopulation in List(1.0, 34.0, 67.0, 100.0))
  )

// Commandes
val cmds = 
  List(
    "random-seed ${seed}",
    "run-young-openmole"
  )

// NetLogo task
val youngTask =
  NetLogo5Task(workDirectory / "M1_FS-Young.nlogo", cmds) set (
    inputs += seed,
    outputs += (seed, probaMove, probaBirth, probaDeath, probaDeathByOvercrowding, initialPopulation),
    netLogoInputs += (probaMove, "proba-move"),
    netLogoInputs += (probaBirth, "proba-birth"),
    netLogoInputs += (probaDeath, "proba-death"),
    netLogoInputs += (probaDeathByOvercrowding, "proba-death-by-overcrowding"),
    netLogoInputs += (initialPopulation, "Initial-population"),
    netLogoOutputs += ("ticks", ticks),
    netLogoOutputs += ("populationWorld", population),
    netLogoOutputs += ("nbSettlementsWorld", nbSettlements),
    netLogoOutputs += ("occupiedWorld", occupiedWorld),
    netLogoOutputs += ("timeWorld", thistime)
  )

// Export
val csvHook = AppendToCSVFileHook(workDirectory / "result.csv", seed, probaMove, probaBirth, probaDeath, probaDeathByOvercrowding, initialPopulation, ticks, population, nbSettlements, occupiedWorld, thistime)

// Lancement
exploration -< ((youngTask on env) hook csvHook)
