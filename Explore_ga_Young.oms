//Env
val env = LocalEnvironment(15)

// Inputs
val seed = Val[Int]
val probaMove = Val[Double] //[0.0 -> 1.0] step: 0.33
val probaBirth = Val[Double] //[0.0 -> 1.0] step: 0.33
val probaDeath = Val[Double] //[0.0 -> 1.0] step: 0.33
val probaDeathByOvercrowding = Val[Double] //[0.0 -> 1.0] step: 0.33
val initialPopulation = Val[Double] //[1 -> 100] step: 33


// Outputs
val ticks = Val[Double]
val population = Val[Double]
val nbSettlements = Val[Double]
val occupiedWorld = Val[Double]
val thistime = Val[Double]

val popObj = Val[Double]
val settlementObj = Val[Double]

// Commandes
val cmds = 
  List(
    "random-seed ${seed}",
    "run-young-openmole"
  )

// NetLogo task
val youngTask =
  NetLogo5Task("/iscpif/users/rey/YOUNG/YoungModelExploration/M1_FS-Young.nlogo", cmds, seed = seed) set (
    outputs += (seed, probaMove, probaBirth, probaDeath, probaDeathByOvercrowding, initialPopulation),
    netLogoInputs += (probaMove, "proba-move"),
    netLogoInputs += (probaBirth, "proba-birth"),
    netLogoInputs += (probaDeath, "proba-death"),
    netLogoInputs += (probaDeathByOvercrowding, "proba-death-by-overcrowding"),
    netLogoInputs += (initialPopulation, "Initial-population"),
    netLogoOutputs += ("ticks", ticks),
    netLogoOutputs += ("populationWorld", population),
    netLogoOutputs += ("nbSettlementsWorld", nbSettlements),
    netLogoOutputs += ("occupiedWorld", occupiedWorld),
    netLogoOutputs += ("timeWorld", thistime)
  )


val modelCapsule = Capsule(youngTask)

val evalModel = 
  ScalaTask(
    """
    |val popObj = 1000000.0 - population
    |val settlementObj = 1000000.0 - nbSettlements""".stripMargin
  ) set (
    name := "evaluation",
    inputs += (population,nbSettlements),
    outputs += (popObj, settlementObj)
  )

val evaluateModel = youngTask -- evalModel


val evolution =
  SteadyStateEvolution(
    algorithm =   
      NSGA2(
        mu = 100,
        genome = Seq(probaMove in (0.0, 1.0), probaBirth in (0.0, 1.0), probaDeath in (0.0, 1.0), probaDeathByOvercrowding in (0.0, 1.0), initialPopulation in (1.0, 100.0)),
        objectives = Seq(popObj,settlementObj),
        replication = Replication(seed = seed, aggregation = Seq("_.median", "_.median"))
      ),
    evaluation = evaluateModel,
    parallelism = 20,
    termination = 5 hour
  )

// Define a hook to save the Pareto frontier
val savePopulationHook = SavePopulationHook(evolution, "/iscpif/users/rey/YOUNG/result/")

// Plug everything together to create the workflow
(evolution hook savePopulationHook) & (modelCapsule on env) start

